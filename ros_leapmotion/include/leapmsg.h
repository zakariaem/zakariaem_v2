// Generated by Zakariae Mhiriz from file leapmotion/leapmsg.msg
// DO NOT EDIT!


#ifndef LEAPMOTION_MESSAGE_LEAPMSG_H
#define LEAPMOTION_MESSAGE_LEAPMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace leapmotion
{
template <class ContainerAllocator>
struct leapmsg_
{
  typedef leapmsg_<ContainerAllocator> Type;

  leapmsg_()
    : header()
    , hands_count(0)
    , fingers_count(0)
    , arm_direction()
    , elbow()
    , wrist()
    , hand_direction()
    , palm_normal()
    , palmpos()
    , thumb_metacarpal()
    , thumb_proximal()
    , thumb_intermediate()
    , thumb_distal()
    , thumb_tip()
    , index_metacarpal()
    , index_proximal()
    , index_intermediate()
    , index_distal()
    , index_tip()
    , middle_metacarpal()
    , middle_proximal()
    , middle_intermediate()
    , middle_distal()
    , middle_tip()
    , ring_metacarpal()
    , ring_proximal()
    , ring_intermediate()
    , ring_distal()
    , ring_tip()
    , pinky_metacarpal()
    , pinky_proximal()
    , pinky_intermediate()
    , pinky_distal()
    , pinky_tip()  {
    }
  leapmsg_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , hands_count(0)
    , fingers_count(0)
    , arm_direction(_alloc)
    , elbow(_alloc)
    , wrist(_alloc)
    , hand_direction(_alloc)
    , palm_normal(_alloc)
    , palmpos(_alloc)
    , thumb_metacarpal(_alloc)
    , thumb_proximal(_alloc)
    , thumb_intermediate(_alloc)
    , thumb_distal(_alloc)
    , thumb_tip(_alloc)
    , index_metacarpal(_alloc)
    , index_proximal(_alloc)
    , index_intermediate(_alloc)
    , index_distal(_alloc)
    , index_tip(_alloc)
    , middle_metacarpal(_alloc)
    , middle_proximal(_alloc)
    , middle_intermediate(_alloc)
    , middle_distal(_alloc)
    , middle_tip(_alloc)
    , ring_metacarpal(_alloc)
    , ring_proximal(_alloc)
    , ring_intermediate(_alloc)
    , ring_distal(_alloc)
    , ring_tip(_alloc)
    , pinky_metacarpal(_alloc)
    , pinky_proximal(_alloc)
    , pinky_intermediate(_alloc)
    , pinky_distal(_alloc)
    , pinky_tip(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int8_t _hands_count_type;
  _hands_count_type hands_count;

   typedef int8_t _fingers_count_type;
  _fingers_count_type fingers_count;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _arm_direction_type;
  _arm_direction_type arm_direction;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _elbow_type;
  _elbow_type elbow;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _wrist_type;
  _wrist_type wrist;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _hand_direction_type;
  _hand_direction_type hand_direction;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _palm_normal_type;
  _palm_normal_type palm_normal;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _palmpos_type;
  _palmpos_type palmpos;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _thumb_metacarpal_type;
  _thumb_metacarpal_type thumb_metacarpal;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _thumb_proximal_type;
  _thumb_proximal_type thumb_proximal;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _thumb_intermediate_type;
  _thumb_intermediate_type thumb_intermediate;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _thumb_distal_type;
  _thumb_distal_type thumb_distal;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _thumb_tip_type;
  _thumb_tip_type thumb_tip;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _index_metacarpal_type;
  _index_metacarpal_type index_metacarpal;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _index_proximal_type;
  _index_proximal_type index_proximal;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _index_intermediate_type;
  _index_intermediate_type index_intermediate;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _index_distal_type;
  _index_distal_type index_distal;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _index_tip_type;
  _index_tip_type index_tip;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _middle_metacarpal_type;
  _middle_metacarpal_type middle_metacarpal;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _middle_proximal_type;
  _middle_proximal_type middle_proximal;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _middle_intermediate_type;
  _middle_intermediate_type middle_intermediate;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _middle_distal_type;
  _middle_distal_type middle_distal;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _middle_tip_type;
  _middle_tip_type middle_tip;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _ring_metacarpal_type;
  _ring_metacarpal_type ring_metacarpal;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _ring_proximal_type;
  _ring_proximal_type ring_proximal;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _ring_intermediate_type;
  _ring_intermediate_type ring_intermediate;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _ring_distal_type;
  _ring_distal_type ring_distal;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _ring_tip_type;
  _ring_tip_type ring_tip;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _pinky_metacarpal_type;
  _pinky_metacarpal_type pinky_metacarpal;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _pinky_proximal_type;
  _pinky_proximal_type pinky_proximal;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _pinky_intermediate_type;
  _pinky_intermediate_type pinky_intermediate;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _pinky_distal_type;
  _pinky_distal_type pinky_distal;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _pinky_tip_type;
  _pinky_tip_type pinky_tip;





  typedef boost::shared_ptr< ::leapmotion::leapmsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::leapmotion::leapmsg_<ContainerAllocator> const> ConstPtr;

}; // struct leapmsg_

typedef ::leapmotion::leapmsg_<std::allocator<void> > leapmsg;

typedef boost::shared_ptr< ::leapmotion::leapmsg > leapmsgPtr;
typedef boost::shared_ptr< ::leapmotion::leapmsg const> leapmsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::leapmotion::leapmsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::leapmotion::leapmsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace leapmotion

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'geometry_msgs': ['C:/opt/ros/melodic/x64/share/geometry_msgs/cmake/../msg'], 'leapmotion': ['C:/Users/simzi/Desktop/these/codes_et_datasets/catkin_ws/src/leapmotion/msg'], 'std_msgs': ['C:/opt/ros/melodic/x64/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::leapmotion::leapmsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::leapmotion::leapmsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::leapmotion::leapmsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::leapmotion::leapmsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::leapmotion::leapmsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::leapmotion::leapmsg_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::leapmotion::leapmsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "463552b466755489b2157c2a8979b22a";
  }

  static const char* value(const ::leapmotion::leapmsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x463552b466755489ULL;
  static const uint64_t static_value2 = 0xb2157c2a8979b22aULL;
};

template<class ContainerAllocator>
struct DataType< ::leapmotion::leapmsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "leapmotion/leapmsg";
  }

  static const char* value(const ::leapmotion::leapmsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::leapmotion::leapmsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"int8 hands_count\n"
"int8 fingers_count\n"
"geometry_msgs/Vector3 arm_direction\n"
"geometry_msgs/Point elbow\n"
"geometry_msgs/Point wrist\n"
"geometry_msgs/Vector3 hand_direction\n"
"geometry_msgs/Vector3 palm_normal\n"
"geometry_msgs/Point palmpos\n"
"geometry_msgs/Point thumb_metacarpal\n"
"geometry_msgs/Point thumb_proximal\n"
"geometry_msgs/Point thumb_intermediate\n"
"geometry_msgs/Point thumb_distal\n"
"geometry_msgs/Point thumb_tip\n"
"geometry_msgs/Point index_metacarpal\n"
"geometry_msgs/Point index_proximal\n"
"geometry_msgs/Point index_intermediate\n"
"geometry_msgs/Point index_distal\n"
"geometry_msgs/Point index_tip\n"
"geometry_msgs/Point middle_metacarpal\n"
"geometry_msgs/Point middle_proximal\n"
"geometry_msgs/Point middle_intermediate\n"
"geometry_msgs/Point middle_distal\n"
"geometry_msgs/Point middle_tip\n"
"geometry_msgs/Point ring_metacarpal\n"
"geometry_msgs/Point ring_proximal\n"
"geometry_msgs/Point ring_intermediate\n"
"geometry_msgs/Point ring_distal\n"
"geometry_msgs/Point ring_tip\n"
"geometry_msgs/Point pinky_metacarpal\n"
"geometry_msgs/Point pinky_proximal\n"
"geometry_msgs/Point pinky_intermediate\n"
"geometry_msgs/Point pinky_distal\n"
"geometry_msgs/Point pinky_tip\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::leapmotion::leapmsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::leapmotion::leapmsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.hands_count);
      stream.next(m.fingers_count);
      stream.next(m.arm_direction);
      stream.next(m.elbow);
      stream.next(m.wrist);
      stream.next(m.hand_direction);
      stream.next(m.palm_normal);
      stream.next(m.palmpos);
      stream.next(m.thumb_metacarpal);
      stream.next(m.thumb_proximal);
      stream.next(m.thumb_intermediate);
      stream.next(m.thumb_distal);
      stream.next(m.thumb_tip);
      stream.next(m.index_metacarpal);
      stream.next(m.index_proximal);
      stream.next(m.index_intermediate);
      stream.next(m.index_distal);
      stream.next(m.index_tip);
      stream.next(m.middle_metacarpal);
      stream.next(m.middle_proximal);
      stream.next(m.middle_intermediate);
      stream.next(m.middle_distal);
      stream.next(m.middle_tip);
      stream.next(m.ring_metacarpal);
      stream.next(m.ring_proximal);
      stream.next(m.ring_intermediate);
      stream.next(m.ring_distal);
      stream.next(m.ring_tip);
      stream.next(m.pinky_metacarpal);
      stream.next(m.pinky_proximal);
      stream.next(m.pinky_intermediate);
      stream.next(m.pinky_distal);
      stream.next(m.pinky_tip);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct leapmsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::leapmotion::leapmsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::leapmotion::leapmsg_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "hands_count: ";
    Printer<int8_t>::stream(s, indent + "  ", v.hands_count);
    s << indent << "fingers_count: ";
    Printer<int8_t>::stream(s, indent + "  ", v.fingers_count);
    s << indent << "arm_direction: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.arm_direction);
    s << indent << "elbow: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.elbow);
    s << indent << "wrist: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.wrist);
    s << indent << "hand_direction: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.hand_direction);
    s << indent << "palm_normal: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.palm_normal);
    s << indent << "palmpos: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.palmpos);
    s << indent << "thumb_metacarpal: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.thumb_metacarpal);
    s << indent << "thumb_proximal: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.thumb_proximal);
    s << indent << "thumb_intermediate: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.thumb_intermediate);
    s << indent << "thumb_distal: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.thumb_distal);
    s << indent << "thumb_tip: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.thumb_tip);
    s << indent << "index_metacarpal: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.index_metacarpal);
    s << indent << "index_proximal: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.index_proximal);
    s << indent << "index_intermediate: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.index_intermediate);
    s << indent << "index_distal: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.index_distal);
    s << indent << "index_tip: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.index_tip);
    s << indent << "middle_metacarpal: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.middle_metacarpal);
    s << indent << "middle_proximal: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.middle_proximal);
    s << indent << "middle_intermediate: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.middle_intermediate);
    s << indent << "middle_distal: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.middle_distal);
    s << indent << "middle_tip: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.middle_tip);
    s << indent << "ring_metacarpal: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.ring_metacarpal);
    s << indent << "ring_proximal: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.ring_proximal);
    s << indent << "ring_intermediate: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.ring_intermediate);
    s << indent << "ring_distal: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.ring_distal);
    s << indent << "ring_tip: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.ring_tip);
    s << indent << "pinky_metacarpal: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.pinky_metacarpal);
    s << indent << "pinky_proximal: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.pinky_proximal);
    s << indent << "pinky_intermediate: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.pinky_intermediate);
    s << indent << "pinky_distal: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.pinky_distal);
    s << indent << "pinky_tip: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.pinky_tip);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LEAPMOTION_MESSAGE_LEAPMSG_H
